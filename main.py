from typing import Tuple
import asyncio
import math
import sympy

x = sympy.Symbol('x')

tarFunc: sympy.Expr = \
    -0.91345 * (math.e ** (-x / 11.63286)) + \
    -0.91354 * (math.e ** (-x / 14.21794)) + \
    1.82708

xyPairs = [
    (1.07, 0.13), (1.95, 0.24), (4.49, 0.63),

    (0.45419084, 0.0511206), (0.910953947, 0.1182191), (1.841089735, 0.2548561), (4.523289946, 0.6488713),
    
    (0.120992, 0.002174), (0.452847, 0.050923), (0.923075, 0.12), (1.953796, 0.271413), (2.406572, 0.337925), (2.998893, 0.424937),
    (3.887818, 0.555521), (4.575872, 0.656596), (4.92211, 0.707458),
    
    (0.121566, 0.002258), (0.495049, 0.057123), (1.001998, 0.131593), (1.916789, 0.265976), (2.528328, 0.355811), (3.11354, 0.441779),
    (4.023965, 0.575521), (4.565218, 0.65503), (5.0796, 0.730593),
    
    (0.116725782, 0.001547), (0.455792042, 0.051356), (0.993468605, 0.130341), (2.062574723, 0.287392), (2.565551008, 0.361279), (2.941129162, 0.416452),
    (4.088939304, 0.585065), (4.384924147, 0.628545), (4.883804326, 0.701831)
]

async def solve(xy: Tuple[float, float]) -> float:
    """코루틴 함수입니다.

    주어진 y값에 대해 `tarFunc = y` 방정식을 근사적으로 풀어줍니다.

    매개변수
    ----------
    * xy: :class:`Tuple[float, float]`
        - 이 방정식에 쓰일 x, y값을 나타냅니다.
        - x값은 근사의 시작점, y값은 함숫값을 나타냅니다.
    
    반환값
    -------
    * 0번 - 새로 구한 x값
    * 1번 - 사용된 y값
    * 2번 - 새로 구한 x값과 기존의 x값 간의 오차율 (단위: %)
    * 2번 - 새로 구한 x값을 대입했을 때 지정된 y값과의 오차율 (단위: %)

    ."""

    x, y = xy # Unpacking
    sol = sympy.nsolve(tarFunc - y, x, prec=2)
    errx = abs(sol - x) / x * 100
    erry = abs(tarFunc.subs('x', sol) - y) / y * 100
    return sol, y, errx, erry

async def main():
    """코루틴 함수입니다.
    위에 지정된 모든 xy pair에 대해 위의 solve함수를 실행하고, 반환값을 로그 파일에 작성합니다.

    각 방정식의 풀이가 독립적이므로, 시간 절약을 위해 비동기로 진행했습니다.
    출력 형식은 y는 소수점 6자리까지, x와 오차율은 소수점 2자리 까지로 제한했습니다.
    """

    result  = "   x   |     y     |  err x  |  err y \n"
    result += "----------------------------------------\n"

    for task in [asyncio.create_task(solve(xy)) for xy in xyPairs]:
        x, y, errx, erry = await task
        result += f"{x:6.2f} | {y:9.6f} | {errx:6.2f}% | {erry:6.2f}%\n"
    
    with open(".log", 'w', encoding='UTF-8') as f:
        f.write(result)

asyncio.run(main())
